// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/sarulabsdi/internal/contracts/gettersetter (interfaces: IGetterSetter)

// Package gettersetter is a generated GoMock package.
package gettersetter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIGetterSetter is a mock of IGetterSetter interface.
type MockIGetterSetter struct {
	ctrl     *gomock.Controller
	recorder *MockIGetterSetterMockRecorder
}

// MockIGetterSetterMockRecorder is the mock recorder for MockIGetterSetter.
type MockIGetterSetterMockRecorder struct {
	mock *MockIGetterSetter
}

// NewMockIGetterSetter creates a new mock instance.
func NewMockIGetterSetter(ctrl *gomock.Controller) *MockIGetterSetter {
	mock := &MockIGetterSetter{ctrl: ctrl}
	mock.recorder = &MockIGetterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetterSetter) EXPECT() *MockIGetterSetterMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockIGetterSetter) GetValue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockIGetterSetterMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockIGetterSetter)(nil).GetValue))
}

// SetValue mocks base method.
func (m *MockIGetterSetter) SetValue(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", arg0)
}

// SetValue indicates an expected call of SetValue.
func (mr *MockIGetterSetterMockRecorder) SetValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockIGetterSetter)(nil).SetValue), arg0)
}
