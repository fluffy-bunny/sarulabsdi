// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/sarulabsdi/internal/contracts/timefuncs (interfaces: ITimeHost)

// Package timefuncs is a generated GoMock package.
package timefuncs

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockITimeHost is a mock of ITimeHost interface.
type MockITimeHost struct {
	ctrl     *gomock.Controller
	recorder *MockITimeHostMockRecorder
}

// MockITimeHostMockRecorder is the mock recorder for MockITimeHost.
type MockITimeHostMockRecorder struct {
	mock *MockITimeHost
}

// NewMockITimeHost creates a new mock instance.
func NewMockITimeHost(ctrl *gomock.Controller) *MockITimeHost {
	mock := &MockITimeHost{ctrl: ctrl}
	mock.recorder = &MockITimeHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITimeHost) EXPECT() *MockITimeHostMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockITimeHost) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockITimeHostMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockITimeHost)(nil).Now))
}
