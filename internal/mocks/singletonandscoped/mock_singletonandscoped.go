// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluffy-bunny/sarulabsdi/internal/contracts/singletonandscoped (interfaces: ISingletonAndScoped)

// Package singletonandscoped is a generated GoMock package.
package singletonandscoped

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISingletonAndScoped is a mock of ISingletonAndScoped interface.
type MockISingletonAndScoped struct {
	ctrl     *gomock.Controller
	recorder *MockISingletonAndScopedMockRecorder
}

// MockISingletonAndScopedMockRecorder is the mock recorder for MockISingletonAndScoped.
type MockISingletonAndScopedMockRecorder struct {
	mock *MockISingletonAndScoped
}

// NewMockISingletonAndScoped creates a new mock instance.
func NewMockISingletonAndScoped(ctrl *gomock.Controller) *MockISingletonAndScoped {
	mock := &MockISingletonAndScoped{ctrl: ctrl}
	mock.recorder = &MockISingletonAndScopedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISingletonAndScoped) EXPECT() *MockISingletonAndScopedMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockISingletonAndScoped) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockISingletonAndScopedMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockISingletonAndScoped)(nil).GetName))
}
