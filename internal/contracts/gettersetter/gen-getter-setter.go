// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package gettersetter

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeIGetterSetter used when your service claims to implement IGetterSetter
var ReflectTypeIGetterSetter = di.GetInterfaceReflectType((*IGetterSetter)(nil))

// AddSingletonIGetterSetterByObj adds a prebuilt obj
func AddSingletonIGetterSetterByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeIGetterSetter)
}

// AddSingletonIGetterSetter adds a type that implements IGetterSetter
func AddSingletonIGetterSetter(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeIGetterSetter)
}

// AddSingletonIGetterSetterByFunc adds a type by a custom func
func AddSingletonIGetterSetterByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIGetterSetter)
}

// AddTransientIGetterSetter adds a type that implements IGetterSetter
func AddTransientIGetterSetter(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeIGetterSetter)
}

// AddTransientIGetterSetterByFunc adds a type by a custom func
func AddTransientIGetterSetterByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIGetterSetter)
}

// AddScopedIGetterSetter adds a type that implements IGetterSetter
func AddScopedIGetterSetter(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeIGetterSetter)
}

// AddScopedIGetterSetterByFunc adds a type by a custom func
func AddScopedIGetterSetterByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeIGetterSetter)
}

// RemoveAllIGetterSetter removes all IGetterSetter from the DI
func RemoveAllIGetterSetter(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIGetterSetter)
}

// GetIGetterSetterFromContainer alternative to SafeGetIGetterSetterFromContainer but panics of object is not present
func GetIGetterSetterFromContainer(ctn di.Container) IGetterSetter {
	return ctn.GetByType(ReflectTypeIGetterSetter).(IGetterSetter)
}

// SafeGetIGetterSetterFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIGetterSetterFromContainer(ctn di.Container) (IGetterSetter, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIGetterSetter)
	if err != nil {
		return nil, err
	}
	return obj.(IGetterSetter), nil
}
