// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package singletonandscoped

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeISingletonAndScoped used when your service claims to implement ISingletonAndScoped
var ReflectTypeISingletonAndScoped = di.GetInterfaceReflectType((*ISingletonAndScoped)(nil))

// AddSingletonISingletonAndScopedByObj adds a prebuilt obj
func AddSingletonISingletonAndScopedByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeISingletonAndScoped)
}

// AddSingletonISingletonAndScoped adds a type that implements ISingletonAndScoped
func AddSingletonISingletonAndScoped(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeISingletonAndScoped)
}

// AddSingletonISingletonAndScopedByFunc adds a type by a custom func
func AddSingletonISingletonAndScopedByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeISingletonAndScoped)
}

// AddTransientISingletonAndScoped adds a type that implements ISingletonAndScoped
func AddTransientISingletonAndScoped(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeISingletonAndScoped)
}

// AddTransientISingletonAndScopedByFunc adds a type by a custom func
func AddTransientISingletonAndScopedByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeISingletonAndScoped)
}

// AddScopedISingletonAndScoped adds a type that implements ISingletonAndScoped
func AddScopedISingletonAndScoped(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeISingletonAndScoped)
}

// AddScopedISingletonAndScopedByFunc adds a type by a custom func
func AddScopedISingletonAndScopedByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeISingletonAndScoped)
}

// RemoveAllISingletonAndScoped removes all ISingletonAndScoped from the DI
func RemoveAllISingletonAndScoped(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISingletonAndScoped)
}

// GetISingletonAndScopedFromContainer alternative to SafeGetISingletonAndScopedFromContainer but panics of object is not present
func GetISingletonAndScopedFromContainer(ctn di.Container) ISingletonAndScoped {
	return ctn.GetByType(ReflectTypeISingletonAndScoped).(ISingletonAndScoped)
}

// SafeGetISingletonAndScopedFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISingletonAndScopedFromContainer(ctn di.Container) (ISingletonAndScoped, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISingletonAndScoped)
	if err != nil {
		return nil, err
	}
	return obj.(ISingletonAndScoped), nil
}
