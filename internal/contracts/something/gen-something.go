// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package something

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeISomething used when your service claims to implement ISomething
var ReflectTypeISomething = di.GetInterfaceReflectType((*ISomething)(nil))

// AddSingletonISomethingByObj adds a prebuilt obj
func AddSingletonISomethingByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeISomething)
}

// AddSingletonISomething adds a type that implements ISomething
func AddSingletonISomething(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeISomething)
}

// AddSingletonISomethingByFunc adds a type by a custom func
func AddSingletonISomethingByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeISomething)
}

// AddTransientISomething adds a type that implements ISomething
func AddTransientISomething(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeISomething)
}

// AddTransientISomethingByFunc adds a type by a custom func
func AddTransientISomethingByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeISomething)
}

// AddScopedISomething adds a type that implements ISomething
func AddScopedISomething(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeISomething)
}

// AddScopedISomethingByFunc adds a type by a custom func
func AddScopedISomethingByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeISomething)
}

// RemoveAllISomething removes all ISomething from the DI
func RemoveAllISomething(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISomething)
}

// GetISomethingFromContainer alternative to SafeGetISomethingFromContainer but panics of object is not present
func GetISomethingFromContainer(ctn di.Container) ISomething {
	return ctn.GetByType(ReflectTypeISomething).(ISomething)
}

// SafeGetISomethingFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISomethingFromContainer(ctn di.Container) (ISomething, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISomething)
	if err != nil {
		return nil, err
	}
	return obj.(ISomething), nil
}
