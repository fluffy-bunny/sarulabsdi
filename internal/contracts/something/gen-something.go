// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package something

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeISomething used when your service claims to implement ISomething
var ReflectTypeISomething = di.GetInterfaceReflectType((*ISomething)(nil))

// AddSingletonISomething adds a type that implements ISomething
func AddSingletonISomething(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISomethingWithMetadata adds a type that implements ISomething
func AddSingletonISomethingWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISomethingByObj adds a prebuilt obj
func AddSingletonISomethingByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISomethingByObjWithMetadata adds a prebuilt obj
func AddSingletonISomethingByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISomethingByFunc adds a type by a custom func
func AddSingletonISomethingByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISomethingByFuncWithMetadata adds a type by a custom func
func AddSingletonISomethingByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISomething adds a type that implements ISomething
func AddTransientISomething(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISomethingWithMetadata adds a type that implements ISomething
func AddTransientISomethingWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISomethingByFunc adds a type by a custom func
func AddTransientISomethingByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISomethingByFuncWithMetadata adds a type by a custom func
func AddTransientISomethingByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISomething adds a type that implements ISomething
func AddScopedISomething(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISomethingWithMetadata adds a type that implements ISomething
func AddScopedISomethingWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISomethingByFunc adds a type by a custom func
func AddScopedISomethingByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISomethingByFuncWithMetadata adds a type by a custom func
func AddScopedISomethingByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISomething removes all ISomething from the DI
func RemoveAllISomething(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISomething)
}

// GetISomethingFromContainer alternative to SafeGetISomethingFromContainer but panics of object is not present
func GetISomethingFromContainer(ctn di.Container) ISomething {
	return ctn.GetByType(ReflectTypeISomething).(ISomething)
}

// GetManyISomethingFromContainer alternative to SafeGetManyISomethingFromContainer but panics of object is not present
func GetManyISomethingFromContainer(ctn di.Container) []ISomething {
	objs := ctn.GetManyByType(ReflectTypeISomething)
	var results []ISomething
	for _, obj := range objs {
		results = append(results, obj.(ISomething))
	}
	return results
}

// SafeGetISomethingFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISomethingFromContainer(ctn di.Container) (ISomething, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISomething)
	if err != nil {
		return nil, err
	}
	return obj.(ISomething), nil
}

// SafeGetManyISomethingFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISomethingFromContainer(ctn di.Container) ([]ISomething, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISomething)
	if err != nil {
		return nil, err
	}
	var results []ISomething
	for _, obj := range objs {
		results = append(results, obj.(ISomething))
	}
	return results, nil
}

// ReflectTypeISomething2 used when your service claims to implement ISomething2
var ReflectTypeISomething2 = di.GetInterfaceReflectType((*ISomething2)(nil))

// AddSingletonISomething2 adds a type that implements ISomething2
func AddSingletonISomething2(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISomething2WithMetadata adds a type that implements ISomething2
func AddSingletonISomething2WithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISomething2ByObj adds a prebuilt obj
func AddSingletonISomething2ByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISomething2ByObjWithMetadata adds a prebuilt obj
func AddSingletonISomething2ByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISomething2ByFunc adds a type by a custom func
func AddSingletonISomething2ByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISomething2ByFuncWithMetadata adds a type by a custom func
func AddSingletonISomething2ByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISomething2 adds a type that implements ISomething2
func AddTransientISomething2(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISomething2WithMetadata adds a type that implements ISomething2
func AddTransientISomething2WithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISomething2ByFunc adds a type by a custom func
func AddTransientISomething2ByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISomething2ByFuncWithMetadata adds a type by a custom func
func AddTransientISomething2ByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISomething2 adds a type that implements ISomething2
func AddScopedISomething2(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISomething2WithMetadata adds a type that implements ISomething2
func AddScopedISomething2WithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISomething2ByFunc adds a type by a custom func
func AddScopedISomething2ByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISomething2ByFuncWithMetadata adds a type by a custom func
func AddScopedISomething2ByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething2)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISomething2 removes all ISomething2 from the DI
func RemoveAllISomething2(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISomething2)
}

// GetISomething2FromContainer alternative to SafeGetISomething2FromContainer but panics of object is not present
func GetISomething2FromContainer(ctn di.Container) ISomething2 {
	return ctn.GetByType(ReflectTypeISomething2).(ISomething2)
}

// GetManyISomething2FromContainer alternative to SafeGetManyISomething2FromContainer but panics of object is not present
func GetManyISomething2FromContainer(ctn di.Container) []ISomething2 {
	objs := ctn.GetManyByType(ReflectTypeISomething2)
	var results []ISomething2
	for _, obj := range objs {
		results = append(results, obj.(ISomething2))
	}
	return results
}

// SafeGetISomething2FromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISomething2FromContainer(ctn di.Container) (ISomething2, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISomething2)
	if err != nil {
		return nil, err
	}
	return obj.(ISomething2), nil
}

// SafeGetManyISomething2FromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISomething2FromContainer(ctn di.Container) ([]ISomething2, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISomething2)
	if err != nil {
		return nil, err
	}
	var results []ISomething2
	for _, obj := range objs {
		results = append(results, obj.(ISomething2))
	}
	return results, nil
}

// ReflectTypeISomething3 used when your service claims to implement ISomething3
var ReflectTypeISomething3 = di.GetInterfaceReflectType((*ISomething3)(nil))

// AddSingletonISomething3 adds a type that implements ISomething3
func AddSingletonISomething3(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISomething3WithMetadata adds a type that implements ISomething3
func AddSingletonISomething3WithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISomething3ByObj adds a prebuilt obj
func AddSingletonISomething3ByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISomething3ByObjWithMetadata adds a prebuilt obj
func AddSingletonISomething3ByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISomething3ByFunc adds a type by a custom func
func AddSingletonISomething3ByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISomething3ByFuncWithMetadata adds a type by a custom func
func AddSingletonISomething3ByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISomething3 adds a type that implements ISomething3
func AddTransientISomething3(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISomething3WithMetadata adds a type that implements ISomething3
func AddTransientISomething3WithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISomething3ByFunc adds a type by a custom func
func AddTransientISomething3ByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISomething3ByFuncWithMetadata adds a type by a custom func
func AddTransientISomething3ByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISomething3 adds a type that implements ISomething3
func AddScopedISomething3(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISomething3WithMetadata adds a type that implements ISomething3
func AddScopedISomething3WithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISomething3ByFunc adds a type by a custom func
func AddScopedISomething3ByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISomething3ByFuncWithMetadata adds a type by a custom func
func AddScopedISomething3ByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISomething3)
	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISomething3 removes all ISomething3 from the DI
func RemoveAllISomething3(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISomething3)
}

// GetISomething3FromContainer alternative to SafeGetISomething3FromContainer but panics of object is not present
func GetISomething3FromContainer(ctn di.Container) ISomething3 {
	return ctn.GetByType(ReflectTypeISomething3).(ISomething3)
}

// GetManyISomething3FromContainer alternative to SafeGetManyISomething3FromContainer but panics of object is not present
func GetManyISomething3FromContainer(ctn di.Container) []ISomething3 {
	objs := ctn.GetManyByType(ReflectTypeISomething3)
	var results []ISomething3
	for _, obj := range objs {
		results = append(results, obj.(ISomething3))
	}
	return results
}

// SafeGetISomething3FromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISomething3FromContainer(ctn di.Container) (ISomething3, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISomething3)
	if err != nil {
		return nil, err
	}
	return obj.(ISomething3), nil
}

// SafeGetManyISomething3FromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISomething3FromContainer(ctn di.Container) ([]ISomething3, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISomething3)
	if err != nil {
		return nil, err
	}
	var results []ISomething3
	for _, obj := range objs {
		results = append(results, obj.(ISomething3))
	}
	return results, nil
}
