// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package timefuncs

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeITimeHost used when your service claims to implement ITimeHost
var ReflectTypeITimeHost = di.GetInterfaceReflectType((*ITimeHost)(nil))

// AddSingletonITimeHostByObj adds a prebuilt obj
func AddSingletonITimeHostByObj(builder *di.Builder, obj interface{}) {
	di.AddSingletonWithImplementedTypesByObj(builder, obj, ReflectTypeITimeHost)
}

// AddSingletonITimeHost adds a type that implements ITimeHost
func AddSingletonITimeHost(builder *di.Builder, implType reflect.Type) {
	di.AddSingletonWithImplementedTypes(builder, implType, ReflectTypeITimeHost)
}

// AddSingletonITimeHostByFunc adds a type by a custom func
func AddSingletonITimeHostByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, ReflectTypeITimeHost)
}

// AddTransientITimeHost adds a type that implements ITimeHost
func AddTransientITimeHost(builder *di.Builder, implType reflect.Type) {
	di.AddTransientWithImplementedTypes(builder, implType, ReflectTypeITimeHost)
}

// AddTransientITimeHostByFunc adds a type by a custom func
func AddTransientITimeHostByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, ReflectTypeITimeHost)
}

// AddScopedITimeHost adds a type that implements ITimeHost
func AddScopedITimeHost(builder *di.Builder, implType reflect.Type) {
	di.AddScopedWithImplementedTypes(builder, implType, ReflectTypeITimeHost)
}

// AddScopedITimeHostByFunc adds a type by a custom func
func AddScopedITimeHostByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error)) {
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, ReflectTypeITimeHost)
}

// RemoveAllITimeHost removes all ITimeHost from the DI
func RemoveAllITimeHost(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITimeHost)
}

// GetITimeHostFromContainer alternative to SafeGetITimeHostFromContainer but panics of object is not present
func GetITimeHostFromContainer(ctn di.Container) ITimeHost {
	return ctn.GetByType(ReflectTypeITimeHost).(ITimeHost)
}

// GetManyITimeHostFromContainer alternative to SafeGetManyITimeHostFromContainer but panics of object is not present
func GetManyITimeHostFromContainer(ctn di.Container) []ITimeHost {
	objs := ctn.GetManyByType(ReflectTypeITimeHost)
	var results []ITimeHost
	for _, obj := range objs {
		results = append(results, obj.(ITimeHost))
	}
	return results
}

// SafeGetITimeHostFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITimeHostFromContainer(ctn di.Container) (ITimeHost, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITimeHost)
	if err != nil {
		return nil, err
	}
	return obj.(ITimeHost), nil
}

// SafeGetManyITimeHostFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITimeHostFromContainer(ctn di.Container) ([]ITimeHost, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITimeHost)
	if err != nil {
		return nil, err
	}
	var results []ITimeHost
	for _, obj := range objs {
		results = append(results, obj.(ITimeHost))
	}
	return results, nil
}
