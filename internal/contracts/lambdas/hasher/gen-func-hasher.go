// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package hasher

import (
	"reflect"

	di "github.com/fluffy-bunny/sarulabsdi"
)

// ReflectTypeHash used when your service claims to implement Hash
var ReflectTypeHash = reflect.TypeOf(Hash(nil))

// AddSingletonHashFunc adds a func to the DI
func AddHashFunc(builder *di.Builder, fnc Hash) {
	di.AddFunc(builder, fnc)
}

// RemoveAllHashFunc removes all Hash functions from the DI
func RemoveAllHashFunc(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeHash)
}

// GetHashFromContainer alternative to SafeGetHashFromContainer but panics of object is not present
func GetHashFromContainer(ctn di.Container) Hash {
	return ctn.GetByType(ReflectTypeHash).(Hash)
}

// GetManyHashFromContainer alternative to SafeGetManyHashFromContainer but panics of object is not present
func GetManyHashFromContainer(ctn di.Container) []Hash {
	objs := ctn.GetManyByType(ReflectTypeHash)
	var results []Hash
	for _, obj := range objs {
		results = append(results, obj.(Hash))
	}
	return results
}

// SafeGetHashFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetHashFromContainer(ctn di.Container) (Hash, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeHash)
	if err != nil {
		return nil, err
	}
	return obj.(Hash), nil
}

// SafeGetManyHashFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyHashFromContainer(ctn di.Container) ([]Hash, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeHash)
	if err != nil {
		return nil, err
	}
	var results []Hash
	for _, obj := range objs {
		results = append(results, obj.(Hash))
	}
	return results, nil
}
